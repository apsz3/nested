start: program

program: s_expr*

// Fortunately, Schem does not support things like (+ +++++1 ---1), so we wont.
?s_expr: atom
| list
| "'" s_expr -> qtd

list: "(" s_expr* ")"

// https://github.com/lark-parser/lark/blob/master/lark/grammars/common.lark

// REMEMBER TO CAPITALIZE TERMINAL RULES, OTHERWISE THEY PARSE AS TREES
// https://www.scheme.com/tspl2/grammar.html
INITIAL: LETTER | "+" | "-" | "=" | "!" | ">" | "<" | "-" | "_" | "?" | "^" | "~"
SUBSEQUENT: (DIGIT | INITIAL | "'")
IDENTIFIER: INITIAL SUBSEQUENT*

?atom: IDENTIFIER -> ident
    | NUMBER -> number
    | ESCAPED_STRING -> string



COMMENT: /;.*/

%import common.LETTER
%import common.DIGIT
%import common.SIGNED_NUMBER
%import common.NUMBER

%import common.ESCAPED_STRING
%import common.WS

%import common.NUMBER


%ignore COMMENT
%ignore WS
