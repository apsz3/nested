start: program

program: s_expr*

// Fortunately, Schem does not support things like (+ +++++1 ---1), so we wont.
?s_expr: atom
| list

list: "(" s_expr* ")"

// https://github.com/lark-parser/lark/blob/master/lark/grammars/common.lark

// REMEMBER TO CAPITALIZE TERMINAL RULES, OTHERWISE THEY PARSE AS TREES
//ident: (LETTER) (LETTER | DIGIT | "_" | "-")*
// regex accepting a single "+", or the ident below:
OP: "+" | "-"
IDENTIFIER: /[^\W\d-][\w-]*/
ident: OP | IDENTIFIER
symbol: "#" ident

?atom: ident
    | NUMBER -> number
    | ESCAPED_STRING -> string
    | symbol
    | ident

COMMENT: /;.*/

%import common.LETTER
%import common.DIGIT
%import common.SIGNED_NUMBER
%import common.NUMBER

%import common.ESCAPED_STRING
%import common.WS

%import common.NUMBER


%ignore COMMENT
%ignore WS
