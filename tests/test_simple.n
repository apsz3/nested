;; (- 1 2)
;; 1
;; 1.0
;; -1
;; -1.0
;; ""
;; "foo"
;; (+ 1 1)
;; (+ 1 -1)

;; (let x 1)
;; (print x)
;; (print (add x 2))

;; (let x (= 1 1))
;; (print x)
;; (print (= 1 1))
;; (print (= (= 1 1) #t))
;; (assert (= x #t))
;; (asseq (fst '(+ 1 2 3)) '+)
'()
'a
(let _len (lambda (l acc)
    (if (= l '()) acc
    (_len (rst l) (+ 1 acc)))))
;; (let len )
(print (= (_len (list) 0) 0))
(print (list))
(print '())

(let qt '(+ 1 22))
(print (eval qt))
